//
// Created by dingjing on 23-10-10.
//

#ifndef UDISKS_SCANNER_VULNERBILITY_REPORT_H
#define UDISKS_SCANNER_VULNERBILITY_REPORT_H
#include <memory>

#include <QMap>
#include <QMutex>
#include <QTimer>
#include <QObject>

#include <sqlite3.h>

#include "../model/vulnerability-item.h"


class VulnerabilityReport : public QObject
{
    Q_OBJECT
public:
    static VulnerabilityReport* getInstance();
    std::shared_ptr<VulnerabilityItem> getItemByKey(QString& name);

Q_SIGNALS:
    void addItem (QString& name);

    void stop ();
    void start ();
    void pause ();
    void loadItemFinished ();

private:
    explicit VulnerabilityReport(QObject*parent = nullptr);

public Q_SLOTS:
    void reset ();

private:
    void closeSqlite();
    bool openSqlite ();
    void onDBChanged ();

private:
    sqlite3*                                            mDB{};
    QString                                             mDBPath;

    QTimer*                                             mTimer{};

    QAtomicInt                                          mIsRunning;     // 1 运行, 0 运行完毕
    QAtomicInt                                          mPause;         // 0 运行, 1 暂停, 2 停止

    QMutex                                              mLocker;        // 多余的
    QList<std::shared_ptr<VulnerabilityItem>>           mData;
    QMap<QString, std::shared_ptr<VulnerabilityItem>>   mDataIdx;

    static VulnerabilityReport*                         gInstance;
};


#endif //UDISKS_SCANNER_VULNERBILITY_REPORT_H
