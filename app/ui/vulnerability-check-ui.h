//
// Created by dingjing on 23-10-10.
//

#ifndef UDISKS_SCANNER_VULNERABILITY_CHECK_UI_H
#define UDISKS_SCANNER_VULNERABILITY_CHECK_UI_H
#include <memory>
#include <QWidget>
#include <QVBoxLayout>

#include "model/vulnerability-item.h"
#include "vulnerability-check-item-ui.h"

class Process;

class QLabel;
class QPushButton;
class VulnerabilityCheckUI : public QWidget
{
    Q_OBJECT
public:
    enum Type { Success, Warning };
    VulnerabilityCheckUI()=delete;
    explicit VulnerabilityCheckUI (Type type, QWidget* parent = nullptr);

    int getSuccessItem() const;
    int getWarningItem() const;

Q_SIGNALS:
    void stop();
    void pause();
    void reset ();
    void start(bool s=true);

    void addItem(std::shared_ptr<VulnerabilityItem>);

    void resizeUI();
    void lazyUpdate(int pos=0);
    void updateItemCount(int c=0);

private Q_SLOTS:

private:
    int                         mSuccessItem = 0;
    int                         mWarningItem = 0;

    Type                        mType;

    QLabel*                     mTitle;
    Process*                    mProgress;
    QWidget*                    mDetailWidget;
    QVBoxLayout*                mMainLayout;

    bool                        mIsChecked;
    QPushButton*                mShowDetail;

    int                                                 mShowedItem = 0;
    QList<std::shared_ptr<VulnerabilityCheckItemUI>>    mItemWidget;
};


#endif //UDISKS_SCANNER_VULNERABILITY_CHECK_UI_H
